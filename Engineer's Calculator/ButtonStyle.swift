//
//  ButtonStyle.swift
//  Engineer's Calculator
//
//  Created by Mike Griebling on 21 Aug 2017.
//  Copyright Â© 2017 Computer Inspirations. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class ButtonStyle : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawAcos(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 42, height: 22), resizing: ResizingBehavior = .aspectFit, trig: String = "cos") {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 42, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 42, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: 0, width: 42, height: 22)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = trig.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        trig.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 32, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawReciprocal(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 11, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 11, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 16)


        //// Group
        //// Text 2 Drawing
        let text2Rect = NSRect(x: 0, y: 3, width: 9, height: 11)
        let text2TextContent = "-"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 12)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 4, y: 0, width: 6, height: 16)
        let text3TextContent = "1"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 12)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text3Style,
        ]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text3Rect)
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawAsin(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 35, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 35, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: 0, width: 43, height: 22)
        let textTextContent = "sin"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 25, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawAtan(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 37, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 37, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 37, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: 1, width: 43, height: 22)
        let textTextContent = "tan"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 28, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawAsinh(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 46, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 46, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 46, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: 0, width: 50, height: 22)
        let textTextContent = "sinh"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 36, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawAcosh(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 52, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 52, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 52, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: -3, width: 54, height: 27)
        let textTextContent = "cosh"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 42, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawAtanh(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 48, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 48, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: -1, width: 50, height: 23)
        let textTextContent = "tanh"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 38, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawButton(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 61, height: 51), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 61, height: 51), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 61, y: resizedFrame.height / 51)


        //// Color Declarations
        let buttonGray = NSColor(red: 0.839, green: 0.839, blue: 0.839, alpha: 1)
        let buttonStoke = NSColor(red: 0.557, green: 0.557, blue: 0.557, alpha: 1)

        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(rect: NSRect(x: 1, y: 1, width: 60, height: 50))
        buttonGray.setFill()
        rectanglePath.fill()
        buttonStoke.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawInverse(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 19, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 19, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 0, y: 1, width: 43, height: 22)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol Drawing
        let symbolRect = NSRect(x: 10, y: 7, width: 11, height: 16)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ButtonStyle.drawReciprocal(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSquared(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 23, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 23, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 23, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 0, width: 13, height: 19)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 14, y: 8, width: 12, height: 14)
        let text2TextContent = "2"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawCubed(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 21, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 21, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 0, y: 0, width: 13, height: 19)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 11, y: 8, width: 12, height: 14)
        let text2TextContent = "3"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawNpower(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 23, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 23, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 23, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 0, width: 13, height: 19)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 14, y: 9, width: 12, height: 16)
        let text2TextContent = "y"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawPowerOf2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 23, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 23, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 23, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 0, width: 13, height: 19)
        let textTextContent = "2"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 14, y: 8, width: 12, height: 14)
        let text2TextContent = "x"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSqrt(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 27, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 27, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 14, y: 2, width: 13, height: 19)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 3, y: 2, width: 13, height: 19)
        let text3TextContent = "â"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text3Style,
        ]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text3Rect)
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 13, y: 20))
        bezierPath.curve(to: NSPoint(x: 25.48, y: 20), controlPoint1: NSPoint(x: 29.64, y: 20), controlPoint2: NSPoint(x: 25.48, y: 20))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawCbrt(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 27, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 27, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 22)


        //// Group 2
        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 14, y: 2, width: 13, height: 19)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 3, y: 2, width: 13, height: 19)
        let text3TextContent = "â"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text3Style,
        ]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text3Rect)
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 13, y: 20))
        bezierPath.curve(to: NSPoint(x: 25.48, y: 20), controlPoint1: NSPoint(x: 29.64, y: 20), controlPoint2: NSPoint(x: 25.48, y: 20))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()




        //// Text 2 Drawing
        let text2Rect = NSRect(x: 3, y: 8, width: 12, height: 14)
        let text2TextContent = "3"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: NSFont.smallSystemFontSize())!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 3), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawNroot(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 27, height: 23), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 27, height: 23), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 23)


        //// Group 2
        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 14, y: 2, width: 13, height: 19)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 3, y: 2, width: 13, height: 19)
        let text3TextContent = "â"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text3Style,
        ]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text3Rect)
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 13, y: 20))
        bezierPath.curve(to: NSPoint(x: 25.48, y: 20), controlPoint1: NSPoint(x: 29.64, y: 20), controlPoint2: NSPoint(x: 25.48, y: 20))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()




        //// Text 2 Drawing
        let text2Rect = NSRect(x: 4, y: 9, width: 12, height: 14)
        let text2TextContent = "y"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: NSFont.smallSystemFontSize())!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 3), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawLog2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 40, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 40, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 25)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 5, width: 33, height: 22)
        let textTextContent = "log"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 30, y: 0, width: 12, height: 14)
        let text2TextContent = "2"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawLogy(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 39, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 39, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 39, y: resizedFrame.height / 25)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 6, width: 33, height: 22)
        let textTextContent = "log"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 30, y: 1, width: 12, height: 19)
        let text2TextContent = "y"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawLog10(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 45, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 45, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 45, y: resizedFrame.height / 25)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 5, width: 33, height: 22)
        let textTextContent = "log"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 30, y: 0, width: 6, height: 19)
        let text2TextContent = "1"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 36, y: 0, width: 10, height: 19)
        let text3TextContent = "0"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text3Style,
        ]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text3Rect)
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawPowerOf10(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 31, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 31, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 1, width: 10, height: 17)
        let textTextContent = "1"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 22, y: 10, width: 12, height: 14)
        let text2TextContent = "x"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 11, y: 1, width: 11, height: 17)
        let text3TextContent = "0"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text3Style,
        ]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text3Rect)
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawPowerOf(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Group
        //// Text Drawing
        let textRect = NSRect(x: 3, y: 1, width: 14, height: 17)
        let textTextContent = "e"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 13, y: 11, width: 12, height: 14)
        let text2TextContent = "x"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawLog(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)


        //// Text Drawing
        let textRect = NSRect(x: 3, y: 1, width: 17, height: 22)
        let textTextContent = "ln"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 20)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawFraction(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 20, height: 26), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 20, height: 26), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 26)


        //// Group
        //// Text 2 Drawing
        let text2Rect = NSRect(x: 6, y: 1, width: 12, height: 16)
        let text2TextContent = "y"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: text2Style,
        ]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(text2Rect)
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 4), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 1.5, y: 14))
        bezierPath.curve(to: NSPoint(x: 19, y: 14), controlPoint1: NSPoint(x: 19, y: 14), controlPoint2: NSPoint(x: 19, y: 14))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Text Drawing
        let textRect = NSRect(x: 6, y: 14, width: 12, height: 16)
        let textTextContent = "x"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            NSFontAttributeName: NSFont(name: "HelveticaNeue-Medium", size: 15)!,
            NSForegroundColorAttributeName: NSColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 4), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(ButtonStyleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
